// JD Preloader
if (typeof window.JDLoader === 'undefined') {
    window.JDLoader = {
        open: function(selector) {
            if (!selector) {
                const defaultLoader = document.getElementById('loader-container');
                if (defaultLoader) {
                    defaultLoader.style.display = 'flex';
                }
                return;
            }

            if (selector.startsWith('.')) {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    element.style.display = 'flex';
                });
            } else if (selector.startsWith('#')) {
                const element = document.querySelector(selector);
                if (element) {
                    element.style.display = 'flex';
                }
            } else {
                const element = document.getElementById(selector);
                if (element) {
                    element.style.display = 'flex';
                }
            }
        },

        close: function(selector) {
            if (!selector) {
                const defaultLoader = document.getElementById('loader-container');
                if (defaultLoader) {
                    defaultLoader.style.display = 'none';
                }
                return;
            }

            if (selector.startsWith('.')) {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    element.style.display = 'none';
                });
            } else if (selector.startsWith('#')) {
                const element = document.querySelector(selector);
                if (element) {
                    element.style.display = 'none';
                }
            } else {
                const element = document.getElementById(selector);
                if (element) {
                    element.style.display = 'none';
                }
            }
        }
    };
}

/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * http://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
(function(window, document) {
    "use strict";

    function repaint() {
        canvas.width = window.innerWidth, canvas.height = 5 * options.barThickness;
        var ctx = canvas.getContext("2d");
        ctx.shadowBlur = options.shadowBlur, ctx.shadowColor = options.shadowColor;
        var stop, lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
        for (stop in options.barColors) lineGradient.addColorStop(stop, options.barColors[stop]);
        ctx.lineWidth = options.barThickness, ctx.beginPath(), ctx.moveTo(0, options.barThickness / 2), ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2), ctx.strokeStyle = lineGradient, ctx.stroke()
    }
    var canvas, currentProgress, showing, progressTimerId = null,
        fadeTimerId = null,
        delayTimerId = null,
        options = {
            autoRun: !0,
            barThickness: 3,
            barColors: {
                0: "rgba(26,  188, 156, .9)",
                ".25": "rgba(52,  152, 219, .9)",
                ".50": "rgba(241, 196, 15,  .9)",
                ".75": "rgba(230, 126, 34,  .9)",
                "1.0": "rgba(211, 84,  0,   .9)"
            },
            shadowBlur: 10,
            shadowColor: "rgba(0,   0,   0,   .6)",
            className: null
        },
        topbar = {
            config: function(opts) {
                for (var key in opts) options.hasOwnProperty(key) && (options[key] = opts[key])
            },
            show: function(handler) {
                var type, elem;
                showing || (handler ? delayTimerId = delayTimerId || setTimeout(() => topbar.show(), handler) : (showing = !0, null !== fadeTimerId && window.cancelAnimationFrame(fadeTimerId), canvas || ((elem = (canvas = document.createElement("canvas")).style).position = "fixed", elem.top = elem.left = elem.right = elem.margin = elem.padding = 0, elem.zIndex = 100001, elem.display = "none", options.className && canvas.classList.add(options.className), document.body.appendChild(canvas), type = "resize", handler = repaint, (elem = window).addEventListener ? elem.addEventListener(type, handler, !1) : elem.attachEvent ? elem.attachEvent("on" + type, handler) : elem["on" + type] = handler), canvas.style.opacity = 1, canvas.style.display = "block", topbar.progress(0), options.autoRun && function loop() {
                    progressTimerId = window.requestAnimationFrame(loop), topbar.progress("+" + .05 * Math.pow(1 - Math.sqrt(currentProgress), 2))
                }()))
            },
            progress: function(to) {
                return void 0 === to || ("string" == typeof to && (to = (0 <= to.indexOf("+") || 0 <= to.indexOf("-") ? currentProgress : 0) + parseFloat(to)), currentProgress = 1 < to ? 1 : to, repaint()), currentProgress
            },
            hide: function() {
                clearTimeout(delayTimerId), delayTimerId = null, showing && (showing = !1, null != progressTimerId && (window.cancelAnimationFrame(progressTimerId), progressTimerId = null), function loop() {
                    return 1 <= topbar.progress("+.1") && (canvas.style.opacity -= .05, canvas.style.opacity <= .05) ? (canvas.style.display = "none", void(fadeTimerId = null)) : void(fadeTimerId = window.requestAnimationFrame(loop))
                }())
            }
        };
    "object" == typeof module && "object" == typeof module.exports ? module.exports = topbar : "function" == typeof define && define.amd ? define(function() {
        return topbar
    }) : this.topbar = topbar
}).call(this, window, document);

/**
 * JDVToast Notification Library
 * A lightweight, customizable toast notification system built with Tailwind CSS
 * 
 * Usage:
 * JDVToast.success('Success message');
 * JDVToast.error('Error message');
 * JDVToast.warning('Warning message');
 * JDVToast.info('Info message');
 * JDVToast.show('Custom message', 'custom-type', 5000);
 */

(function(global) {
    'use strict';

    const JDVToast = {
        container: null,
        config: {
            position: 'top-right', // top-right, top-left, bottom-right, bottom-left, top-center, bottom-center
            maxToasts: 5,
            defaultDuration: 4000,
            animationDuration: 300
        },

        // Notification types configuration
        types: {
            success: {
                icon: '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>',
                classes: 'bg-emerald-500 border-emerald-600 text-white shadow-emerald-500/25',
                duration: 3000
            },
            error: {
                icon: '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>',
                classes: 'bg-red-500 border-red-600 text-white shadow-red-500/25',
                duration: 5000
            },
            warning: {
                icon: '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                classes: 'bg-amber-500 border-amber-600 text-white shadow-amber-500/25',
                duration: 4000
            },
            info: {
                icon: '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>',
                classes: 'bg-blue-500 border-blue-600 text-white shadow-blue-500/25',
                duration: 4000
            },
            loading: {
                icon: '<svg class="w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>',
                classes: 'bg-gray-600 border-gray-700 text-white shadow-gray-600/25',
                duration: 0 // Don't auto-dismiss loading toasts
            }
        },

        // Initialize the toast container
        init() {
            if (this.container) return;

            this.container = document.createElement('div');
            this.container.id = 'toast-container';
            this.container.className = this.getContainerClasses();
            document.body.appendChild(this.container);

            // Add CSS for animations if not already added
            if (!document.getElementById('toast-styles')) {
                this.injectStyles();
            }
        },

        // Get container classes based on position
        getContainerClasses() {
            const positions = {
                'top-right': 'fixed top-4 right-4 z-50 space-y-2',
                'top-left': 'fixed top-4 left-4 z-50 space-y-2',
                'top-center': 'fixed top-4 left-1/2 transform -translate-x-1/2 z-50 space-y-2',
                'bottom-right': 'fixed bottom-4 right-4 z-50 space-y-2',
                'bottom-left': 'fixed bottom-4 left-4 z-50 space-y-2',
                'bottom-center': 'fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50 space-y-2'
            };
            return positions[this.config.position] || positions['top-right'];
        },

        // Inject custom styles
        injectStyles() {
            const style = document.createElement('style');
            style.id = 'toast-styles';
            style.textContent = `
                .toast-enter {
                    transform: translateX(100%);
                    opacity: 0;
                }
                .toast-enter-active {
                    transform: translateX(0);
                    opacity: 1;
                    transition: all ${this.config.animationDuration}ms cubic-bezier(0.4, 0, 0.2, 1);
                }
                .toast-exit {
                    transform: translateX(0);
                    opacity: 1;
                }
                .toast-exit-active {
                    transform: translateX(100%);
                    opacity: 0;
                    transition: all ${this.config.animationDuration}ms cubic-bezier(0.4, 0, 0.2, 1);
                }
                .toast-left .toast-enter {
                    transform: translateX(-100%);
                }
                .toast-left .toast-exit-active {
                    transform: translateX(-100%);
                }
                .toast-center .toast-enter {
                    transform: translateY(-100%);
                }
                .toast-center .toast-exit-active {
                    transform: translateY(-100%);
                }
                .toast-bottom .toast-enter {
                    transform: translateY(100%);
                }
                .toast-bottom .toast-exit-active {
                    transform: translateY(100%);
                }
            `;
            document.head.appendChild(style);
        },

        // Show a toast notification
        show(message, type = 'info', duration = null, options = {}) {
            this.init();

            // Limit number of toasts
            if (this.container.children.length >= this.config.maxToasts) {
                this.remove(this.container.firstChild.id);
            }

            const toastConfig = this.types[type] || this.types.info;
            const id = 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
            const finalDuration = duration !== null ? duration : toastConfig.duration;

            const toast = document.createElement('div');
            toast.id = id;
            toast.className = `toast-enter flex items-start p-4 rounded-lg border shadow-lg backdrop-blur-sm max-w-sm min-w-72 ${toastConfig.classes}`;

            // Add position-specific classes
            if (this.config.position.includes('left')) {
                toast.classList.add('toast-left');
            } else if (this.config.position.includes('center')) {
                toast.classList.add('toast-center');
            }
            if (this.config.position.includes('bottom')) {
                toast.classList.add('toast-bottom');
            }

            // Build toast content
            const closeButton = options.dismissible !== false ? `
                <button onclick="JDVToast.remove('${id}')" class="ml-3 flex-shrink-0 opacity-70 hover:opacity-100 transition-opacity duration-200 p-1 rounded-full hover:bg-black/10">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            ` : '';

            const title = options.title ? `<div class="font-semibold text-sm mb-1">${options.title}</div>` : '';

            toast.innerHTML = `
                <div class="flex-shrink-0 mr-3 mt-0.5">
                    ${toastConfig.icon}
                </div>
                <div class="flex-1 min-w-0">
                    ${title}
                    <div class="text-sm leading-relaxed">${message}</div>
                </div>
                ${closeButton}
            `;

            // Add progress bar for timed toasts
            if (finalDuration > 0) {
                const progressBar = document.createElement('div');
                progressBar.className = 'absolute bottom-0 left-0 h-1 bg-black/20 rounded-b-lg transition-all duration-100 ease-linear';
                progressBar.style.width = '100%';
                toast.style.position = 'relative';
                toast.appendChild(progressBar);

                // Animate progress bar
                setTimeout(() => {
                    progressBar.style.width = '0%';
                    progressBar.style.transitionDuration = finalDuration + 'ms';
                }, 50);
            }

            // Add to container
            if (this.config.position.includes('bottom')) {
                this.container.insertBefore(toast, this.container.firstChild);
            } else {
                this.container.appendChild(toast);
            }

            // Trigger enter animation
            setTimeout(() => {
                toast.classList.remove('toast-enter');
                toast.classList.add('toast-enter-active');
            }, 10);

            // Auto-remove if duration is set
            if (finalDuration > 0) {
                setTimeout(() => {
                    this.remove(id);
                }, finalDuration);
            }

            // Add click handler for actions
            if (options.onClick) {
                toast.style.cursor = 'pointer';
                toast.addEventListener('click', (e) => {
                    if (e.target.tagName !== 'BUTTON' && !e.target.closest('button')) {
                        options.onClick(e);
                    }
                });
            }

            return {
                id: id,
                remove: () => this.remove(id),
                update: (newMessage, newType) => this.update(id, newMessage, newType)
            };
        },

        // Remove a specific toast
        remove(id) {
            const toast = document.getElementById(id);
            if (!toast) return;

            toast.classList.remove('toast-enter-active');
            toast.classList.add('toast-exit', 'toast-exit-active');

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, this.config.animationDuration);
        },

        // Update an existing toast
        update(id, message, type = null) {
            const toast = document.getElementById(id);
            if (!toast) return;

            const messageElement = toast.querySelector('.flex-1 div:last-child');
            if (messageElement) {
                messageElement.textContent = message;
            }

            if (type && this.types[type]) {
                // Update classes and icon
                const toastConfig = this.types[type];
                toast.className = toast.className.replace(/bg-\w+-\d+\s+border-\w+-\d+\s+shadow-\w+-\d+\/\d+/, toastConfig.classes);

                const iconElement = toast.querySelector('.flex-shrink-0');
                if (iconElement) {
                    iconElement.innerHTML = toastConfig.icon;
                }
            }
        },

        // Clear all toasts
        clear() {
            if (!this.container) return;

            Array.from(this.container.children).forEach(toast => {
                this.remove(toast.id);
            });
        },

        // Configure the toast system
        configure(options) {
            Object.assign(this.config, options);

            // Update container position if changed
            if (this.container && options.position) {
                this.container.className = this.getContainerClasses();
            }
        },

        // Shorthand methods
        success(message, duration, options) {
            return this.show(message, 'success', duration, options);
        },

        error(message, duration, options) {
            return this.show(message, 'error', duration, options);
        },

        warning(message, duration, options) {
            return this.show(message, 'warning', duration, options);
        },

        info(message, duration, options) {
            return this.show(message, 'info', duration, options);
        },

        loading(message, options) {
            return this.show(message, 'loading', 0, {
                ...options,
                dismissible: false
            });
        },

        // Promise-based method for loading states
        promise(promise, messages = {}) {
            const loadingToast = this.loading(messages.loading || 'Loading...');

            return promise
                .then(result => {
                    loadingToast.remove();
                    if (messages.success) {
                        this.success(messages.success);
                    }
                    return result;
                })
                .catch(error => {
                    loadingToast.remove();
                    if (messages.error) {
                        this.error(messages.error);
                    }
                    throw error;
                });
        }
    };

    // Export to global scope
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = JDVToast;
    } else {
        global.JDVToast = JDVToast;
    }

})(typeof window !== 'undefined' ? window : this);